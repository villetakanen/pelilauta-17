---
import OptionalAppLinks from 'src/components/svelte/sites/OptionalAppLinks.svelte';
import SiteAdminActions from 'src/components/svelte/sites/SiteAdminActions.svelte';
import type { Site } from 'src/schemas/SiteSchema';
import { t } from 'src/utils/i18n';
import { systemToNoun } from 'src/utils/schemaHelpers';

/**
 * The Tray used in the SiteApp -microfrontend.
 *
 * @param {Site} site - The site this tray is for.
 *
 * The base-tray visible to anonymoous users is loaded SSR, and all
 * _authz_ requiring components are islands on the client side
 */
type SiteTrayAction = {
  label: string;
  href: string;
  noun: string;
  break?: boolean;
};

interface Props {
  site: Site;
}
const { site } = Astro.props;
const actions: Array<SiteTrayAction> = [
  {
    label: t('site:tray.actions.homepage'),
    href: `/sites/${site.key}`,
    noun: systemToNoun(site.system),
  },
  {
    label: t('site:tray.actions.toc'),
    href: `/sites/${site.key}/toc`,
    noun: 'books',
  },
  {
    label: t('site:tray.actions.assets'),
    href: `/sites/${site.key}/assets`,
    noun: 'assets',
  },
];
---
<div class="flex flex-col h-full pb-1">
  <h3 style="flex: 0 0 auto;">{t('app:mekanismi')}</h3>

  <nav style="flex: 0 0 auto;">
    <ul>
      {actions.map((action) => (
        <li class={`${action.break && 'border-t'}`}>
          <a href={action.href} class="tray-button">
            <cn-icon noun={action.noun} xsmall />
            <span>{action.label}</span>
          </a>
        </li>
      ))}
    </ul>
  </nav>

  <OptionalAppLinks site={site} client:only="svelte"/>

  <div class="grow"></div>

  <div class="tray-bottom-tools border-t" style="flex: 0 0 auto;">
    <SiteAdminActions site={site} client:only="svelte"/>
  </div>
</div>