---
import { type Site, SiteSchema } from 'src/schemas/SiteSchema';
import { t } from 'src/utils/i18n';
import { logError } from 'src/utils/logHelpers';
import MySitesButton from '../../svelte/sites/MySitesButton.svelte';
import SiteListItem from './SiteListItem.astro';

const origin = Astro.url.origin;
let sites: Site[] = [];

try {
  const siteListResponse = await fetch(`${origin}/api/sites`);

  if (!siteListResponse.ok) {
    throw new Error(`Failed to fetch sites: ${siteListResponse.status}`);
  }

  const sitesJSON = await siteListResponse.json();
  sites = (sitesJSON as Array<Site>).map((siteData) =>
    // API provides valid client-side objects, so we can parse them directly
    // to validate/type them
    SiteSchema.parse(siteData),
  );
} catch (error) {
  logError('SiteListColumn', 'Failed to fetch sites:', error);
  // sites remains empty array, component will render without sites
}
---
<section class="column-l">
  <div class="flex justify-space-between align-center">
    <h2>{t('site:siteList.title')}</h2>
    <MySitesButton client:only="svelte"/>
  </div>
  <div class="flex flex-col">
    {sites && sites.map((site) => (
      <SiteListItem site={site} />
    ))}
  </div>      
</section>
