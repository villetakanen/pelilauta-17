---
import { marked } from 'marked';
import type { Thread } from 'src/schemas/ThreadSchema';
import { toDisplayString } from 'src/utils/contentHelpers';
import ProfileLink from '../../svelte/app/ProfileLink.svelte';
import ReactionButton from '../../svelte/app/ReactionButton.svelte';
import CardSubscription from '../../svelte/frontpage/CardSubscription.svelte';

export interface Props {
  thread: Thread;
  noun: string;
}

const { thread, noun } = Astro.props;

const poster = thread.poster
  ? thread.poster
  : thread.images && thread.images.length > 0
    ? thread.images[0].url
    : undefined;

const md = thread.markdownContent || '';
const snippet = await marked(md.slice(0, 220));
---

<div style="flex-basis: auto; width: 100%">
  <cn-card 
    href={`/threads/${thread.key}`} 
    title={thread.title} 
    cover={poster} 
    elevation="1" 
    {noun}
    id={`thread-card-${thread.key}`} 
  >
    <div class="downscaled">
      <Fragment set:html={snippet} />
    </div>
    <CardSubscription thread={thread} client:only="svelte"/>

    <div slot="actions" class="toolbar">
      <div class="grow">
        <p class="m-0 px-1 text-small">
          <ProfileLink uid={thread.owners?.[0] || ''} client:only="svelte" /> 
          <br />
          {toDisplayString(thread.flowTime)}
        </p>
      </div>

      <ReactionButton
        key={thread.key}
        title={thread.title}
        target="thread"
        client:only="svelte" />

      <!-- Link to discussion -->
      <a href={`/threads/${thread.key}#discussion`} class="px-1 no-decoration flex">
        <cn-icon noun="discussion" small />
        <span class="text-caption">{thread.replyCount || 0}</span>
      </a>

    </div>
  </cn-card>
</div>