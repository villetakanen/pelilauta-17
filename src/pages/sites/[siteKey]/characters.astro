---
import PageWithTray from '@layouts/PageWithTray.astro';
import { type Character, CharacterSchema } from '@schemas/CharacterSchema';
import { parseSite } from '@schemas/SiteSchema';
import SiteTray from '@server/SiteApp/SiteTray.astro';
import BackgroundPoster from '@server/ui/BackgroundPoster.astro';
import CharacterCard from '@svelte/characters/CharacterCard.svelte';
import CharactersFab from '@svelte/characters/CharactersFab.svelte';
import { toClientEntry } from '@utils/client/entryUtils';
import { t } from '@utils/i18n';
import { logWarn } from '@utils/logHelpers';

interface Props {
  siteKey: string;
}
const { siteKey } = Astro.params;

// if no siteKey is provided, redirect to 404
if (!siteKey) {
  return Astro.redirect('/404');
}

// Fetch site data from the api
const siteResponse = await fetch(`${Astro.url.origin}/api/sites/${siteKey}`);
if (siteResponse.status === 404) {
  return Astro.redirect('/404');
}
const siteData = await siteResponse.json();
const site = parseSite(toClientEntry(siteData), siteKey);

if (!site) {
  return Astro.redirect('/404');
}

// Check if characters are enabled for this site
if (!site.useCharacters) {
  return Astro.redirect(`/sites/${siteKey}`);
}

// Fetch characters for this site
const charactersResponse = await fetch(
  `${Astro.url.origin}/api/sites/${siteKey}/characters.json`,
);
let characters: Character[] = [];

if (charactersResponse.ok) {
  const charactersData = await charactersResponse.json();
  // Parse each character with Zod for type safety
  characters = charactersData
    .map((characterData: unknown) => {
      try {
        return CharacterSchema.parse(characterData);
      } catch (error) {
        logWarn('Failed to parse character:', error);
        return null;
      }
    })
    .filter((character: Character | null) => character !== null);
}

const title = `${site.name} â€“ ${t('site:characters.title')}`;
const image = site.avatarURL || site.posterURL || site.backgroundURL;
---
<PageWithTray
  title={title}
  description={site.description}
  image={image}
>
  <SiteTray slot="app-tray" site={site}/>
  
  <div class="content-cards">
    <!-- Header for the list -->
    <header>
      <h1 class="downscaled m-0">{t('site:characters.title')}</h1>
      <p class="downscaled text-low">{site.description}</p>
    </header>

    <!-- Display the characters as cards -->
    {characters.length > 0 ? (
      characters.map((character) => (
        <CharacterCard character={character} client:only="svelte" />
      ))
    ) : (
      <section class="secondary border-radius p-2 flex flex-column">
        <cn-icon noun="adventurer" xlarge></cn-icon>
        <p class="downscaled">
          {t('entries:character.empty') || 'No characters found for this site.'}
        </p>
      </section>
    )}
  </div>

  <CharactersFab site={site} client:only="svelte" slot="fab-tray" />

  { site.backgroundURL && 
    <BackgroundPoster src={site.backgroundURL} slot="app-background-poster"/>
  }
</PageWithTray>
