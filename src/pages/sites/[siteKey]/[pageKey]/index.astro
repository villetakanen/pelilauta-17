---
import { getSiteData, getPageData } from '../../../../firebase/server/sites';
import { systemToNoun } from 'src/utils/schemaHelpers';
import PageApp from '../../../../components/server/SiteApp/PageApp.astro';
import SiteTray from '../../../../components/server/SiteApp/SiteTray.astro';
import BackgroundPoster from '../../../../components/server/ui/BackgroundPoster.astro';
import PageFabs from '../../../../components/svelte/sites/PageFabs.svelte';
import SiteStoreInitializer from '../../../../components/svelte/sites/SiteStoreInitializer.svelte';
import PageWithTray from '../../../../layouts/PageWithTray.astro';
import { logError } from '../../../../utils/logHelpers';
import { setPageCacheHeaders } from '../../../../utils/cache/netlify-cache-tags';

const { siteKey, pageKey } = Astro.params;

if (!siteKey || !pageKey) {
  return Astro.redirect('/404');
}

// Direct Firebase access - no API waterfall
const [site, page] = await Promise.all([
  getSiteData(siteKey),
  getPageData(siteKey, pageKey, Astro.url)
]);

if (!site) {
  return Astro.redirect('/404');
}

if (!page) {
  logError(`Page ${pageKey} not found for site ${siteKey}`);
  return Astro.redirect(
    `/sites/${siteKey}/create/page?name=${encodeURIComponent(pageKey)}`,
  );
}

// Helpers
const title = `${page.name || pageKey} â€“ ${site.name}`;
const noun = systemToNoun(site.system);
const image = site.avatarURL || site.posterURL || site.backgroundURL;

// Set cache headers with Netlify cache tags
const isHomepage = pageKey === site.homepage;
setPageCacheHeaders(Astro.response, siteKey, pageKey, isHomepage);
---
<PageWithTray title={title} description={site.description} noun={noun} image={image}>
  <SiteStoreInitializer {site} client:only="svelte" />
  <SiteTray slot="app-tray" site={site}/>
  <PageApp site={site} page={page} />
  <PageFabs pageKey={pageKey} site={site} client:only="svelte" slot="fab-tray" />
  { site.backgroundURL && 
    <BackgroundPoster src={site.backgroundURL} slot="app-background-poster"/>
  }
</PageWithTray>
