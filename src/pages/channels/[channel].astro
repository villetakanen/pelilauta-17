---
import { parseChannel } from 'src/schemas/ChannelSchema';
import { parseThread, type Thread } from 'src/schemas/ThreadSchema';
import { t } from 'src/utils/i18n';
import { logDebug, logError } from 'src/utils/logHelpers';
import { createPlainSnippet } from 'src/utils/snippetHelpers';
import BackgroundPoster from '../../components/server/ui/BackgroundPoster.astro';
import ChannelFabs from '../../components/svelte/threads/ChannelFabs.svelte';
import ChannelThreadList from '../../components/svelte/threads/ChannelThreadList.svelte';
import Page from '../../layouts/Page.astro';

const channelKey = Astro.params.channel || 'pelilauta';

// Remove page parameter handling - always start at page 1
const origin = Astro.url.origin;
const channelsResponse = await fetch(`${origin}/api/meta/channels.json`);
const channels = await channelsResponse.json();
const channeldata = channels.find(
  (channel: { slug: string }) => channel.slug === channelKey,
);

if (!channeldata) {
  Astro.response.status = 404;
  return;
}

const channel = parseChannel(channeldata);
const title = `${channel.name} - ${t('app:shortname')}`;
const shortTitle = channel.name;

// Ensure description is SEO-optimized (150-160 chars)
const description =
  channel.description.length > 160
    ? createPlainSnippet(channel.description, 160)
    : channel.description;

// Fetch initial threads server-side for SSR
let threads: Thread[] = [];
let lastThreadFlowTime = 0;
let hasError = false;

// Set cache headers for better performance
Astro.response.headers.set(
  'Cache-Control',
  'public, max-age=300, s-maxage=600',
);

try {
  const queryString = `${origin}/api/threads.json?channel=${channel.slug}&limit=11`;
  logDebug('ChannelPage', 'Fetching initial threads:', queryString);

  const threadListResponse = await fetch(queryString);
  if (!threadListResponse.ok) {
    throw new Error(`Failed to fetch threads: ${threadListResponse.status}`);
  }

  const threadsJSON = await threadListResponse.json();
  threads = threadsJSON.map((thread: Thread) =>
    parseThread(thread, thread.key),
  );
  lastThreadFlowTime = threads[threads.length - 1]?.flowTime || 0;

  logDebug('ChannelPage', 'Loaded initial threads:', threads.length);
} catch (error) {
  logError('ChannelPage', 'Failed to load initial threads:', error);
  hasError = true;
}
---
<Page title={title} description={description}>
  <!-- Single Svelte component handles everything -->
  <ChannelThreadList 
    channel={channel}
    initialThreads={threads}
    initialLastFlowTime={lastThreadFlowTime}
    hasError={hasError}
    client:load
  />

  <ChannelFabs client:only="svelte" slot="fab-tray"/>

  <BackgroundPoster
      slot="app-background-poster"
      src="/myrrys-proprietary/juno-viinikka/juno-viinikka-dragon-2.webp"
      md="/myrrys-proprietary/juno-viinikka/juno-viinikka-dragon-2-960.webp"
    />
  
  <p class="text-caption text-center" style="opacity:0.44" slot="app-footer-credits">
    Taustakuva Â© Juno Viinikka (<a href="https://linktr.ee/junowski">https://linktr.ee/junowski</a>)
  </p>
</Page>
